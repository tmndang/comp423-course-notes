{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Tracy's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/rust-setup/","title":"Setting up a dev container for Rust","text":"<ul> <li>Primary author: Tracy Dang</li> <li>Reviewer: Kibby Pangilinan</li> </ul>"},{"location":"tutorials/rust-setup/#objective","title":"Objective","text":"<p>This tutorial will guide you through setting up a development container for Rust, initializing a project, and writing a simple \"Hello COMP423\" program.</p>"},{"location":"tutorials/rust-setup/#prerequisites","title":"Prerequisites","text":"<p>Make sure you have the following completed: 1. Docker installed on your system and running 2. Visual Studio Code installed 3. Git installed 4. The Dev Containers extension installed in VS Code 5. A GitHub account</p>"},{"location":"tutorials/rust-setup/#step-1-git-repository","title":"Step 1: Git Repository","text":"<ol> <li>Open your terminal. Create a new directory for your project and initialize a Git repository:</li> </ol> <pre><code>    mkdir rust-dev-container\n    cd rust-dev-container\n    git init\n</code></pre> <ol> <li>Create a README file:</li> </ol> <pre><code>    echo \"# Rust Dev Container Project\" &gt; README.md\n    git add README.md\n    git commit -m \"Initial commit with README\"\n</code></pre> <ol> <li>Navigate to GitHub and create a new repository page. Name is rust-dev-container, set to public visibility, and do not initialize any files. Then push to a remote repository:</li> </ol> <pre><code>    git remote add origin https://github.com/&lt;your-username&gt;/rust-dev-container.git\n    git branch -M main\n    git push -u origin main\n</code></pre>"},{"location":"tutorials/rust-setup/#step-2-dev-container-configuration","title":"Step 2: Dev Container Configuration","text":"<ol> <li>Install the Dev Containers extension for VS Code. Create a <code>.devcontainer</code> directory at the root.</li> </ol> <pre><code>    mkdir .devcontainer\n</code></pre> <ol> <li>Add the <code>devcontainer.json</code> file:</li> </ol> <pre><code>    {\n      \"name\": \"Rust Dev Environment\",\n      \"image\": \"mcr.microsoft.com/devcontainers/rust:latest\",\n      \"customizations\": {\n        \"vscode\": {\n          \"extensions\": [\"rust-lang.rust-analyzer\"]\n        }\n      },\n      \"postCreateCommand\": \"cargo install cargo-edit\"\n}\n</code></pre> <ol> <li> <p>Reopen the project in the dev container: a) Press <code>Ctrl+Shift+P</code> or <code>Cmd+Shift+P</code> on Mac in VS Code b) Select Dev Containers: Reopen in Container</p> </li> <li> <p>Verify the Rust version:</p> </li> </ol> <pre><code>    rustc --version\n</code></pre> <p>This command checkes that you are using the most recent version of Rust</p>"},{"location":"tutorials/rust-setup/#step-3-rust-project","title":"Step 3: Rust Project","text":"<ol> <li>Inside the dev container, create a new Rust project:</li> </ol> <pre><code>    cargo new hello-comp423 --vcs none\n    cd hello-comp423\n</code></pre> <p>The <code>--vcs none</code> flag makes sure no new Git repository is created.</p> <ol> <li>Open and update the main.rs file to print \"Hello COMP 423\":</li> </ol> <pre><code>    fn main(){\n    println!(\"Hello COMP423!\");\n    }\n</code></pre>"},{"location":"tutorials/rust-setup/#step-4-build-and-run-the-program","title":"Step 4: Build and Run the Program:","text":"<ol> <li>Build the program:</li> </ol> <pre><code>    cargo build\n</code></pre> <p>The <code>cargo</code> handles dependency magagement and builds the entire project, while <code>gcc</code> compilies individual source files.</p> <ol> <li>Run the program:</li> </ol> <pre><code>    cargo run\n</code></pre> <p>The <code>cargo run</code> command combines building and executing the program, while <code>cargo build</code> only compiles without running.</p>"},{"location":"tutorials/rust-setup/#step-5-git-changes","title":"Step 5: Git Changes","text":"<ol> <li>Add your changes:</li> </ol> <pre><code>    git add .\n</code></pre> <ol> <li>Commit your changes:</li> </ol> <pre><code>    git commit -m \"&lt;meaningful message here&gt;\"\n</code></pre> <ol> <li>Push to remote repository:</li> </ol> <pre><code>    git push origin main\n</code></pre>"},{"location":"tutorials/rust-setup/#done","title":"Done","text":"<p>You have successfully set up local and remote repositories, set up your Rust Dev Container, and ran a basic program!</p>"}]}